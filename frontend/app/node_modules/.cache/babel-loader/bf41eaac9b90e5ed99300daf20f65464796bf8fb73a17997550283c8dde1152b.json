{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { userLoginReducer, userRegisterReducer } from './reducers/userReducer';\nimport { tenantListReducer, tenantDetailsReducer, tenantCreateReducer, tenantUpdateReducer, tenantDeleteReducer } from './reducers/tenantReducer';\nimport { productListReducer, productDetailsReducer, productCreateReducer, productUpdateReducer, productDeleteReducer, productsByTenantReducer } from './reducers/productReducer';\n\n// Load userInfo from localStorage if available\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\n\n// Preload initial state\nconst preloadedState = {\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst store = configureStore({\n  reducer: {\n    // User reducers\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    // Tenant reducers\n    tenantList: tenantListReducer,\n    tenantDetails: tenantDetailsReducer,\n    tenantCreate: tenantCreateReducer,\n    tenantUpdate: tenantUpdateReducer,\n    tenantDelete: tenantDeleteReducer,\n    // Product reducers\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    productCreate: productCreateReducer,\n    productUpdate: productUpdateReducer,\n    productDelete: productDeleteReducer,\n    productsByTenant: productsByTenantReducer,\n    productUpdate: productUpdateReducer\n  },\n  preloadedState,\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActionPaths: ['payload.config', 'payload.request'],\n      ignoredPaths: ['userLogin.userInfo']\n    }\n  })\n});\nexport default store;","map":{"version":3,"names":["configureStore","userLoginReducer","userRegisterReducer","tenantListReducer","tenantDetailsReducer","tenantCreateReducer","tenantUpdateReducer","tenantDeleteReducer","productListReducer","productDetailsReducer","productCreateReducer","productUpdateReducer","productDeleteReducer","productsByTenantReducer","userInfoFromStorage","localStorage","getItem","JSON","parse","preloadedState","userLogin","userInfo","store","reducer","userRegister","tenantList","tenantDetails","tenantCreate","tenantUpdate","tenantDelete","productList","productDetails","productCreate","productUpdate","productDelete","productsByTenant","devTools","process","env","NODE_ENV","middleware","getDefaultMiddleware","serializableCheck","ignoredActionPaths","ignoredPaths"],"sources":["C:/Users/Saravanan Sasikumar/OneDrive/Desktop/Saasproject/frontend/app/src/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  userLoginReducer,\r\n  userRegisterReducer,\r\n} from './reducers/userReducer';\r\n\r\nimport {\r\n  tenantListReducer,\r\n  tenantDetailsReducer,\r\n  tenantCreateReducer,\r\n  tenantUpdateReducer,\r\n  tenantDeleteReducer,\r\n} from './reducers/tenantReducer';\r\n\r\nimport {\r\n  productListReducer,\r\n  productDetailsReducer,\r\n  productCreateReducer,\r\n  productUpdateReducer,\r\n  productDeleteReducer,\r\n  productsByTenantReducer,\r\n} from './reducers/productReducer';\r\n\r\n// Load userInfo from localStorage if available\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n  ? JSON.parse(localStorage.getItem('userInfo'))\r\n  : null;\r\n\r\n// Preload initial state\r\nconst preloadedState = {\r\n  userLogin: { userInfo: userInfoFromStorage },\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    // User reducers\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n\r\n    // Tenant reducers\r\n    tenantList: tenantListReducer,\r\n    tenantDetails: tenantDetailsReducer,\r\n    tenantCreate: tenantCreateReducer,\r\n    tenantUpdate: tenantUpdateReducer,\r\n    tenantDelete: tenantDeleteReducer,\r\n\r\n    // Product reducers\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    productCreate: productCreateReducer,\r\n    productUpdate: productUpdateReducer,\r\n    productDelete: productDeleteReducer,\r\n    productsByTenant: productsByTenantReducer,\r\n     productUpdate: productUpdateReducer,\r\n  },\r\n  preloadedState,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActionPaths: ['payload.config', 'payload.request'],\r\n        ignoredPaths: ['userLogin.userInfo'],\r\n      },\r\n    }),\r\n});\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SACEC,gBAAgB,EAChBC,mBAAmB,QACd,wBAAwB;AAE/B,SACEC,iBAAiB,EACjBC,oBAAoB,EACpBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QACd,0BAA0B;AAEjC,SACEC,kBAAkB,EAClBC,qBAAqB,EACrBC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,EACpBC,uBAAuB,QAClB,2BAA2B;;AAElC;AACA,MAAMC,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GACxDC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAC5C,IAAI;;AAER;AACA,MAAMG,cAAc,GAAG;EACrBC,SAAS,EAAE;IAAEC,QAAQ,EAAEP;EAAoB;AAC7C,CAAC;AAED,MAAMQ,KAAK,GAAGtB,cAAc,CAAC;EAC3BuB,OAAO,EAAE;IACP;IACAH,SAAS,EAAEnB,gBAAgB;IAC3BuB,YAAY,EAAEtB,mBAAmB;IAEjC;IACAuB,UAAU,EAAEtB,iBAAiB;IAC7BuB,aAAa,EAAEtB,oBAAoB;IACnCuB,YAAY,EAAEtB,mBAAmB;IACjCuB,YAAY,EAAEtB,mBAAmB;IACjCuB,YAAY,EAAEtB,mBAAmB;IAEjC;IACAuB,WAAW,EAAEtB,kBAAkB;IAC/BuB,cAAc,EAAEtB,qBAAqB;IACrCuB,aAAa,EAAEtB,oBAAoB;IACnCuB,aAAa,EAAEtB,oBAAoB;IACnCuB,aAAa,EAAEtB,oBAAoB;IACnCuB,gBAAgB,EAAEtB,uBAAuB;IACxCoB,aAAa,EAAEtB;EAClB,CAAC;EACDQ,cAAc;EACdiB,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;EAC/CC,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,kBAAkB,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;MACzDC,YAAY,EAAE,CAAC,oBAAoB;IACrC;EACF,CAAC;AACL,CAAC,CAAC;AAEF,eAAetB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}