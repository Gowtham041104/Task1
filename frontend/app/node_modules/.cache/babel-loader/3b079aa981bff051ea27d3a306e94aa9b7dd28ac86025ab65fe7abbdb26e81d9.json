{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL } from '../constants/userConstants';\n\n/**\r\n * User login action\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n */\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/auth/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Login failed. Please try again.'\n    });\n  }\n};\n\n/**\r\n * User registration action\r\n * @param {string} name - User name\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n */\nexport const register = (username, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/auth/signup', {\n      username,\n      email,\n      password\n    },\n    // ✅ Corrected here\n    config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'Registration failed'\n    });\n  }\n};\n/**\r\n * User logout action\r\n */\nexport const logout = () => dispatch => {\n  // Remove user data from localStorage\n  localStorage.removeItem('userInfo');\n\n  // Dispatch logout action\n  dispatch({\n    type: USER_LOGOUT\n  });\n\n  // Optional: Clear any other user-related data\n  localStorage.removeItem('cartItems');\n  localStorage.removeItem('shippingAddress');\n  localStorage.removeItem('paymentMethod');\n};\n\n// For backward compatibility\nexport const signup = register;","map":{"version":3,"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","_error$response","_error$response$data","response","message","register","username","_error$response2","_error$response2$data","logout","removeItem","signup"],"sources":["C:/Users/Saravanan Sasikumar/OneDrive/Desktop/Saasproject/frontend/app/src/redux/actions/userAction.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n} from '../constants/userConstants';\r\n\r\n/**\r\n * User login action\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n */\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: USER_LOGIN_REQUEST });\r\n\r\n    const config = {\r\n      headers: { \r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      '/api/auth/login', \r\n      { email, password }, \r\n      config\r\n    );\r\n\r\n    dispatch({ \r\n      type: USER_LOGIN_SUCCESS, \r\n      payload: data \r\n    });\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload: error.response?.data?.message || \r\n              error.message ||\r\n              'Login failed. Please try again.',\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * User registration action\r\n * @param {string} name - User name\r\n * @param {string} email - User email\r\n * @param {string} password - User password\r\n */\r\nexport const register = (username, email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: USER_REGISTER_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      '/api/auth/signup',\r\n      { username, email, password }, // ✅ Corrected here\r\n      config\r\n    );\r\n\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n    localStorage.setItem('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response?.data?.message ||\r\n        error.message ||\r\n        'Registration failed',\r\n    });\r\n  }\r\n};\r\n/**\r\n * User logout action\r\n */\r\nexport const logout = () => (dispatch) => {\r\n  // Remove user data from localStorage\r\n  localStorage.removeItem('userInfo');\r\n  \r\n  // Dispatch logout action\r\n  dispatch({ type: USER_LOGOUT });\r\n  \r\n  // Optional: Clear any other user-related data\r\n  localStorage.removeItem('cartItems');\r\n  localStorage.removeItem('shippingAddress');\r\n  localStorage.removeItem('paymentMethod');\r\n};\r\n\r\n// For backward compatibility\r\nexport const signup = register;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}